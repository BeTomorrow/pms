#!/usr/bin/env bash

set -Eeuo pipefail

USER_CONFIG_PATH=~/.pms
USER_CONFIG_API_KEY=api-key

POSTMAN_BASE_URL="https://api.getpostman.com"

PROJECT_CONFIG_PATH=pms.config
PROJECT_CONFIG_NAME=name
PROJECT_CONFIG_COLLECTION_FILE=collection-file
PROJECT_CONFIG_COLLECTION_NAME=collection-name
PROJECT_CONFIG_ENVIRONMENT_FILE=environment-file
PROJECT_CONFIG_ENVIRONMENT_NAME=environment-name
PROJECT_CONFIG_REMOTE_REPOSITORY=remote-repository
PROJECT_CONFIG_REMOTE_REPOSITORY_BRANCH=remote-repository-branch

#region MANAGE ARGUMENTS

usage() {
  echo "Usage:"
  echo -e "\t$0 <command> [arguments]"
  echo -e "Commands:"
  echo -e "\tsave, to-disk: download collection and environment from Postman cloud to local disk"
  echo -e "\tload, from-disk: upload local collection and environment to Postman cloud"
  echo -e "\tload-remote, from-git: load collection and environment from a git remote repository to Postman cloud"
  echo -e "\tinit: help setup configuration files"
  echo -e "\thelp: show this help"
  echo ""
  echo "Project configuration file: $PROJECT_CONFIG_PATH"
  echo "User configuration file: $USER_CONFIG_PATH"
  echo ""
  echo "Example to load collection from a git repository:"
  echo -e "\t$0 from-git git@somehost.com:repo/project.git"
  echo -e "\t$0 from-git git@somehost.com:repo/project.git master"
  exit 1
}

action=""
remoteName=""
remoteBranch=""
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    help)
      usage ;;
    init)
      action="init" ;;
    load | from-disk)
      action="from-disk" ;;
    save | to-disk)
      action="to-disk" ;;
    load-remote | from-git)
      if [ $# -eq 1 ]; then
        action="from-git-local-config"
      else
        action="from-git-remote-config"
        remoteName="$2"
        if [ $# -ge 3 ]; then
          remoteBranch="$3"
          shift
        fi
        shift
      fi
      ;;
    --)
      break ;;
    *)
      echo "Unknown parameter passed ($1). Display help with: $0 help"; exit 1 ;;
  esac
  shift
done

#endregion

#region DEFINE FUNCTIONS

configReadItem() {
  local default_value=${3:-""}
  local value=$( (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=${default_value}") | head -n 1 | cut -d '=' -f 2-)
  if [ -z "$value" ] && [ -n "$default_value" ]; then
    value="$default_value"
  fi
  printf -- "%s" "${value}"
}

userConfigGet() {
  local value="$(configReadItem "${USER_CONFIG_PATH}" "${1}" "${2:-""}")"
  printf -- "%s" "${value}"
}

projectConfigGet() {
  local value="$(configReadItem "${PROJECT_CONFIG_PATH}" "${1}" "${2:-""}")"
  printf -- "%s" "${value}"
}

apiGetCollectionUid() {
  local uid=$(curl -sS --fail -X GET "${POSTMAN_BASE_URL}/collections" -H "x-api-key: $API_KEY" | jq -r ".collections[] | select(.name == \"$COLLECTION_NAME\") | .uid" | uniq)
  printf -- "%s" "${uid}"
}

saveCollection() {
  local COLLECTION_UID=$(apiGetCollectionUid)

  case $(expr $(wc -w <<< $COLLECTION_UID)) in
    0) echo "Unable to find $COLLECTION_NAME collection, skipping."
      return ;;
    1) ;;
    *) echo "Found too many collections with this name $COLLECTION_NAME, skipping. UIDs matching that name:"
      echo "$COLLECTION_UID"
      return ;;
  esac

  echo "Found existing $COLLECTION_NAME collection, downloading it..."
  local tmp_file=$(mktemp)
  curl -sS --fail -X GET -H "x-api-key: $API_KEY" -H "content-type: application/json" "${POSTMAN_BASE_URL}/collections/$COLLECTION_UID" | jq -r '.collection' > "$tmp_file"
  # remove all ids
  cat $tmp_file | jq 'walk(if (type == "object" and (._postman_id or .id)) then del(._postman_id, .id) else . end )' > "$COLLECTION_FILE"
}

loadCollection() {
  if [ ! -f "$COLLECTION_FILE" ]; then
    echo "Unable to find $COLLECTION_FILE file, skipping."
    return
  fi

  local COLLECTION_UID=$(apiGetCollectionUid)

  case $(expr $(wc -w <<< $COLLECTION_UID)) in
    0)
      echo "Unable to find $COLLECTION_NAME collection, creating it..."
      local res=$(cat "$COLLECTION_FILE" | jq -r --compact-output '{collection:.}' | curl -sS --fail -X POST -H "x-api-key: $API_KEY" -H "content-type: application/json" -d @- "${POSTMAN_BASE_URL}/collections")
      ;;
    1)
      echo "Found existing $COLLECTION_NAME collection, updating it..."
      local res=$(cat "$COLLECTION_FILE" | jq -r --compact-output '{collection:.}' | curl -sS --fail -X PUT -H "x-api-key: $API_KEY" -H "content-type: application/json" -d @- "${POSTMAN_BASE_URL}/collections/$COLLECTION_UID")
      ;;
    *)
      echo "Found too many collections with this name $COLLECTION_NAME, skipping. UIDs matching that name:"
      echo "$COLLECTION_UID"
      return ;;
  esac
}

apiGetEnvironmentUid() {
  local ENVIRONMENT_UID=$(curl -sS --fail -X GET "${POSTMAN_BASE_URL}/environments" -H "x-api-key: $API_KEY" | jq -r ".environments[] | select(.name == \"$ENVIRONMENT_NAME\") | .uid" | uniq)
  printf -- "%s" "${ENVIRONMENT_UID}"
}

saveEnvironment() {
  local ENVIRONMENT_UID=$(apiGetEnvironmentUid)

  case $(expr $(wc -w <<< $ENVIRONMENT_UID)) in
    0) echo "Unable to find $ENVIRONMENT_NAME collection, skipping."
      return ;;
    1) ;;
    *) echo "Found too many environments with this name $ENVIRONMENT_NAME, skipping. UIDs matching that name:"
      echo "$ENVIRONMENT_UID"
      return ;;
  esac

  echo "Found existing $ENVIRONMENT_NAME environment, downloading it..."
  local tmp_file=$(mktemp)
  curl -sS --fail -X GET -H "x-api-key: $API_KEY" -H "content-type: application/json" "${POSTMAN_BASE_URL}/environments/$ENVIRONMENT_UID" | jq -r '.environment' > "$tmp_file"
  # remove all ids and values
  cat "$tmp_file" |
    jq 'walk(if (type == "object" and (._postman_id or .id)) then del(._postman_id, .id) else . end )' |
    jq 'walk(if (type == "object" and (.value)) then .value = "" else . end)' \
      >"$ENVIRONMENT_FILE"
}

loadEnvironment() {
  if [ ! -f "$ENVIRONMENT_FILE" ]; then
    echo "Unable to find $ENVIRONMENT_FILE file, skipping."
    return
  fi

  local ENVIRONMENT_UID=$(apiGetEnvironmentUid)

  case $(expr $(wc -w <<< $ENVIRONMENT_UID)) in
    0)
      echo "Unable to find $ENVIRONMENT_NAME environment, creating it..."
      local res=$(cat "$ENVIRONMENT_FILE" | jq -r --compact-output '{environment:.}' | curl -sS --fail -X POST -H "x-api-key: $API_KEY" -H "content-type: application/json" -d @- "${POSTMAN_BASE_URL}/environments")
      ;;
    1)
      echo "Found existing $ENVIRONMENT_NAME environment, updating it..."
      local res=$(cat "$ENVIRONMENT_FILE" | jq -r --compact-output '{environment:.}' | curl -sS --fail -X PUT -H "x-api-key: $API_KEY" -H "content-type: application/json" -d @- "${POSTMAN_BASE_URL}/environments/$ENVIRONMENT_UID")
      ;;
    *)
      echo "Found too many environments with this name $ENVIRONMENT_NAME, skipping. UIDs matching that name:"
      echo "$ENVIRONMENT_UID"
      return ;;
  esac
}

remoteGitArchive() {
  local paths=("$@")
  remote_repository="$1"
  remote_repository_branch="$2"
  local paths=("${@:3}")
  if [ ${#paths[@]} -gt 0 ]; then
    git archive --remote="$remote_repository" "$remote_repository_branch" "${paths[@]}" | tar -x
  fi
}

toDisk() {
  if [ -n "$COLLECTION_NAME" ]; then
    saveCollection
  fi
  if [ -n "$ENVIRONMENT_NAME" ]; then
    saveEnvironment
  fi
}

fromDisk() {
  if [ -n "$COLLECTION_NAME" ]; then
    loadCollection
  fi
  if [ -n "$ENVIRONMENT_NAME" ]; then
    loadEnvironment
  fi
}

fromGitRemoteConfig() {
  remote_repository="$1"
  remote_repository_branch="${2:-master}"

  if [ -z "$remote_repository" ]; then
    echo "No remote repository set."
    exit 2
  fi

  echo "Retrieving from remote repository $remote_repository:$remote_repository_branch"

  pushd $(mktemp -d) >/dev/null

  remoteGitArchive "$remote_repository" "$remote_repository_branch" "$PROJECT_CONFIG_PATH"
  readProjectConfig

  local paths=()
  if [ "${COLLECTION_NAME}" ]; then
    paths+=("${COLLECTION_FILE}")
  fi
  if [ "${ENVIRONMENT_NAME}" ]; then
    paths+=("${ENVIRONMENT_FILE}")
  fi
  if [ ${#paths[@]} -eq 0 ]; then
    echo "No collection or environment file to retrieve, skipping."
    return 0
  fi

  remoteGitArchive "$remote_repository" "$remote_repository_branch" "${paths[@]}"
  fromDisk
  popd >/dev/null
}

fromGitLocalConfig() {
  if [ -z "$REMOTE_REPOSITORY" ]; then
    echo "No '${PROJECT_CONFIG_REMOTE_REPOSITORY}' configuration set."
    exit 2
  fi
  if [ -z "$REMOTE_REPOSITORY_BRANCH" ]; then
    echo "No '${PROJECT_CONFIG_REMOTE_REPOSITORY_BRANCH}' configuration set."
    exit 2
  fi

  local paths=()
  if [ "${COLLECTION_NAME}" ]; then
    paths+=("${COLLECTION_FILE}")
  fi
  if [ "${ENVIRONMENT_NAME}" ]; then
    paths+=("${ENVIRONMENT_FILE}")
  fi
  if [ ${#paths[@]} -eq 0 ]; then
    echo "No collection or environment file to retrieve, skipping."
    return 0
  fi

  pushd $(mktemp -d) >/dev/null
  remoteGitArchive "$REMOTE_REPOSITORY" "$REMOTE_REPOSITORY_BRANCH" "${paths[@]}"
  fromDisk
  popd >/dev/null
}

readUserConfig() {
  if [ ! -f "${USER_CONFIG_PATH}" ]; then
    echo "No user configuration found. Please create your '${USER_CONFIG_PATH}' file."
    exit 3
  fi

  API_KEY="$(userConfigGet "${USER_CONFIG_API_KEY}")"

  if [ -z "${API_KEY}" ]; then
    echo "No '${USER_CONFIG_API_KEY}' configuration set in '${USER_CONFIG_PATH}'."
    exit 4
  fi
}

readProjectConfig() {
  if [ ! -f "${PROJECT_CONFIG_PATH}" ]; then
    echo "No project configuration found. Please create your '${PROJECT_CONFIG_PATH}' file."
    exit 5
  fi

  PROJECT_NAME="$(projectConfigGet "${PROJECT_CONFIG_NAME}")"
  COLLECTION_FILE="$(projectConfigGet "${PROJECT_CONFIG_COLLECTION_FILE}" "${PROJECT_NAME}.postman_collection.json")"
  COLLECTION_NAME="$(projectConfigGet "${PROJECT_CONFIG_COLLECTION_NAME}")"
  ENVIRONMENT_FILE="$(projectConfigGet "${PROJECT_CONFIG_ENVIRONMENT_FILE}" "${PROJECT_NAME}.postman_environment.json")"
  ENVIRONMENT_NAME="$(projectConfigGet "${PROJECT_CONFIG_ENVIRONMENT_NAME}")"
  REMOTE_REPOSITORY="$(projectConfigGet "${PROJECT_CONFIG_REMOTE_REPOSITORY}")"
  REMOTE_REPOSITORY_BRANCH="$(projectConfigGet "${PROJECT_CONFIG_REMOTE_REPOSITORY_BRANCH}")"
}

initProjectProperty() {
  local property=$1
  local header=$2
  local prompt=$3
  echo "${header}"
  read -r -p "${prompt}" REPLY
  if [ -n "${REPLY}" ]; then
    echo "${property}=${REPLY}" >> "${PROJECT_CONFIG_PATH}"
  fi
}

init() {
  if [ ! -f "${USER_CONFIG_PATH}" ]; then
    echo "Creating user configuration file '${USER_CONFIG_PATH}'"
    touch "${USER_CONFIG_PATH}"
    chmod 0600 "${USER_CONFIG_PATH}"
    read -s -r -p "Enter Postman API key: " INIT_USER_API_KEY
    echo ""
    echo "${USER_CONFIG_API_KEY}=${INIT_USER_API_KEY}" >> "${USER_CONFIG_PATH}"
    unset INIT_USER_API_KEY
  fi

  if [ ! -f "${PROJECT_CONFIG_PATH}" ]; then
    echo "Creating project configuration file '${PROJECT_CONFIG_PATH}'"
    initProjectProperty "${PROJECT_CONFIG_NAME}" "Enter name, used for collection and environment files names by default" "Name: "
    initProjectProperty "${PROJECT_CONFIG_COLLECTION_NAME}" "Collection name in Postman, leave empty to skip collection handling" "Collection name: "
    if [ -n "${REPLY}" ]; then
      initProjectProperty "${PROJECT_CONFIG_COLLECTION_FILE}" "Collection file name, leave empty to use default file name" "Collection file name: "
    fi
    initProjectProperty "${PROJECT_CONFIG_ENVIRONMENT_NAME}" "Sample environment name in Postman, leave empty to skip environment handling" "Environment name: "
    if [ -n "${REPLY}" ]; then
      initProjectProperty "${PROJECT_CONFIG_ENVIRONMENT_FILE}" "Environment file name, leave empty to use default file name" "Environment file name: "
    fi
    initProjectProperty "${PROJECT_CONFIG_REMOTE_REPOSITORY}" "Enter remote git repository, optional" "Repository: "
    if [ -n "${REPLY}" ]; then
      initProjectProperty "${PROJECT_CONFIG_REMOTE_REPOSITORY_BRANCH}" "Enter remote git repository branch" "Branch name: "
    fi
  fi
  echo "All set."
}

#endregion

#region RUN PROGRAM

case "$action" in
  init) init ;;

  from-disk)
    readUserConfig
    readProjectConfig
    fromDisk ;;

  to-disk)
    readUserConfig
    readProjectConfig
    toDisk ;;

  from-git-local-config)
    readUserConfig
    readProjectConfig
    fromGitLocalConfig ;;

  from-git-remote-config)
    readUserConfig
    fromGitRemoteConfig "$remoteName" "$remoteBranch" ;;

  *) usage ;;
esac

#endregion
